Ex-Mode Addresses
=================
Walter Alan Zintz

Ex-Mode Addressing
------------------

Whenever you want to give an editor command that will operate on text that's
already in the file you're editing--to delete some text, change lower-case
letters to capitals, write to a file, etcetera--the editor needs to know what
part of the file to go to work on. A few commands have their addresses built
in, and most ex-mode commands have default addresses that the editor will use
if you don't give an address, but that still leaves a lot of occasions where
you need to know how to give the editor an address and what address to give.

Many ex-mode commands are almost identical to corresponding commands in normal
mode; many more do similar things in different ways. Most of the benefit of
these duplicative command sets comes from the totally-different addressing
styles of ex and normal modes. The differing address concepts mean that an
edit that would be difficult or impossible to do with one mode's available
addresses can be a piece of cake with an address form found in the other mode.

Since I mention ``ex mode'' so often, you may wonder whether there really is a
separate mode for ex editing. There surely is--instead of filling your screen
with text from the file you're editing, this mode gives you a colon ( : )
prompt for your ex mode commands, and prints only an occasional line from the
file on your screen. The feel of this mode is very much like giving UNIX
commands from your shell prompt. Few people work in ex mode these days,
largely because you can give most ex-mode commands from normal mode, but you
can't give any normal-mode commands while you are in ex mode. Or perhaps they
just prefer the comfortable WYSIWYG feeling of seeing the text on screen, with
changes appearing as they are made.

But there are times when you will need to work temporarily in ex mode. To get
to ex mode when you first launch the editor, invoke it by typing ++ex++
instead of ++vim++. To go to ex mode when you are already in the editor's
normal mode, enter ++Q++. To get back to normal mode, type ++visual++ followed
by a carriage return.

Wondering why I didn't put a colon in front of that command to return to
normal mode, which is obviously an ex-mode command? Because you don't need to
type that colon when you're giving a command from within ex mode. It may even
be harmful; the rule is that if you type a colon at the start of a command
from within ex mode, there must be nothing between the colon and the command
name or abbreviation. Not an address, not even a space, nothing at all.

So from this point on, I will display ex-mode commands without an initial
colon, because you now know enough to type that colon only if you're working
in normal mode. And I'll leave off the tag at the end of an ex-mode command
that reminds you to finish with a carriage return because you now realize that
any ex-mode command, given from either ex or normal mode, has to end with a
carriage return.

Some of you may ask why I show ex-mode command lines in long-winded form, with
spelled-out command names and lots of whitespace instead of using
abbreviations. For instance, the two command lines:

[source,vim]
----
  global /^/ move 0

  g/^/m0
----

are identical in their effect, and the second is surely faster to type, so why
do I show the first form? Because the long version is much easier to follow
when I'm demonstrating a new concept, and almost everything here will be new
to at least some of you. And it's a good idea to get to know the long forms,
because you'll soon be learning to write editor scripts, and those scripts
would be as cryptic as APL to future maintenance programmers if you wrote them
in terse style. When I go over the roster of ex-mode commands, I'll tell you
both the long name and one or two short names for each.

Ex-Mode Address
~~~~~~~~~~~~~~~

A SINGLE ADDRESS is often all you need with an ex-mode command. One address
refers to just one line, which tells a command like delete or substitute to
operate on that one line only. A command like insert or read, which puts
something immediately before or after a particular line, has no use for more
than one address.

A search pattern, as discussed in the first installment of this tutorial, is
always an acceptable ex-mode address. You put the address at the start of the
command line, before the command name (but after the initial colon if you are
giving the command from normal mode), so:

[source,vim]
----
  ?the [cC]at? delete
----

will erase the last previous line that contains the string ``the cat'' or
``the Cat'', while:

[source,vim]
----
  /^GLOSSARY$/ read gloss.book
----

puts the contents of the file ``gloss.book'' right after the next line in the
file you're editing that contains only the word ``GLOSSARY''.

There are two shorthand forms for reusing search patterns as addresses.
Typing ++??++ or ++//++ tells the editor to use the last search pattern you
used previously, and your choice of ++??++ or ++//++ will set the direction of
the search, overriding the direction you chose the previous time you used that
search pattern. That is, if you type:

[source,vim]
----
  ?the cat? yank

  // delete

  ?? print
----

the second command will search forward, to remove the last previous line
containing the string ``the cat'', even though your original use of that
pattern was in a backward search. The third command will search backward to
find the line to print, which (by coincidence) is the direction of the
original search.

But the search pattern that those preceding abbreviations reuse may not be a
pattern you used to search for a line. If you ran a substitute command after
any pattern searches for lines, then the pattern you gave the substitute
command to tell it what text to take out of the line is the pattern that will
be reused. This is so even if your substitute command began with a search
pattern to specify the line on which the substitution was to be performed--the
search to find the pattern to be replaced within the line was run after the
first search pattern had found the line to operate on, so the search within
the line was the last pattern search run. So if you were to type:

[source,vim]
----
  /the cat/ substitute /in the hat/on the mat

  ?? delete
----

the second command would, in this case, delete the last previous line
containing ``in the hat''. To be sure that the pattern that gets reused is the
last one used to find a line, use the abbreviations ++\?++ and ++\/++ to
search backward and forward, respectively. In all other respects these work
just as typing ++??++ and ++//++ do.

A LINE NUMBER is also a valid ex-mode address. The editor automatically
numbers each line in the file consecutively, and this numbering is
dynamic--that is, whenever you add or delete lines somewhere, the editor
renumbers all the lines following the insertion or deletion point. So if you
change some text on line 46 in your file, and then delete lines 11 and 12, the
line with the text you changed is now line 44. And if you then add ten new
lines after line 17, the line with your changed text on it now automatically
becomes line 54.

There is never a gap or an overlap in the line number sequence, so the nth
line in the file is always line number n ; that is, the 7th line is always
line number 7, and so on. (There are several ways to display these line
numbers, which I will expound in a later tutorial installment.) To delete the
153rd line in your file, just type:

[source,vim]
----
  153 delete
----

You don't use any delimiters around a line number, or around any other address
except a search pattern.

There are two symbolic line numbers and one fictional one that can be used in
ex-mode addresses. As long as there are any lines in the buffer (that is,
you haven't specified a not-yet-existent file to edit and failed to enter any
text so far), the editor regards you as being `on' one of them, usually the
last line affected by your latest command. A period or dot ( . ) is the
symbolic address for this line.  The last line in the file also has a symbolic
address: the dollar sign ( $ $). So if you should type:

[source,vim]
----
  . write >> goodlines

  $ delete
----

the first command would append a copy of just the line you are on now to a
file named ``goodlines'', while the second would delete the last line in the
file you are editing.

A few commands put text immediately after the line address you give: the
append command is one of them. In order to let them put their text at the very
start of a file (if that is where you want it), these commands can take the
fictitious line number zero (0) as their address. So, if you want to type some
text that will appear ahead of anything already in the file, you can do it
with either of these command lines:

[source,vim]
----
  1 insert

  0 append
----

(Note, though, that insert and append are among the few ex-mode commands that
cannot be run from normal mode by starting with a colon, because they occupy
more than one line including the text to be put in.)

WRITING YOUR OWN LINE ADDRESSES is possible, too. You can attach lower-case
letters to lines as line addresses, and change the attachments whenever you
like. You can even use a special address that is automatically attached to the
last line you jumped off from.

There are ways to mark a particular line with a lower-case letter of the
alphabet, and those ways differ between ex and normal modes.  I'll be
explaining all these ways in later installments of this tutorial. But once a
line is marked, the ex-mode address that refers to that line is just the
single-quote character followed immediately by the lower-case letter with
which the line was marked. So typing:

[source,vim]
----
  'b print
----

will display on the screen whatever line you have previously marked with the
letter b, no matter where the line is in relation to where you are when you
give the command. No need to tell the editor whether to search forward or
backward; there can be only one line at a time marked with any one letter, and
the editor will find that line regardless.

The editor does some line marking on its own, too. Whenever you move from one
line to another by a non-relative address, the editor marks the line you just
left. (A non-relative address is one that isn't a known number of lines from
where you were.) So:

[source,vim]
----
  $

  /the cat/

  358

  ?glossary? +7

  'b
----

are all non-relative addresses, and if you give any one of them, the editor
will mark the line you are leaving for future reference. Then you can return
to that line just by typing two successive single quotes:

[source,vim]
----
  ''
----

as an ex-mode address. In theory, you can use this address with any ex-mode
command. But it is so difficult to know for sure when you left a line via a
non-relative address that this address form is best saved for going back to
where you were when a mistake moves you far away, at least until you're a
wizard with this editor.

MODIFYING ANY OF THESE ADDRESSES is possible, and there are two ways to do
this. The simpler way is to offset the address a certain number of lines
forward or backward with plus ( + ) or minus ( - ) signs. The rule is that
each plus sign following an address tells the editor to go one line farther
forward in the file than the basic address, while each minus sign means a line
backward. So these three addresses all refer to the same line:

[source,vim]
----
  35

  37 --

  30 +++++
----

Not that you're likely to want to modify line-number addresses with counts,
unless you're weak in arithmetic and want the editor to do the adding and
subtracting for you. But the count offsets will work with any ex-mode
addresses, and are most often used with search patterns.  In any event, there
is a shorthand for these counts, too. A plus or minus sign immediately
followed by a number (single or multiple digits) is equivalent to a string of
plus or minus signs equal to that number, so that these two addresses are the
same:

[source,vim]
----
  /^register long/ ++++

  /^register long/ +4
----

Take note that the ``4'' in the second example does not mean ``line number
4'', as it would if it appeared by itself as an address. After a plus or minus
sign, a number is a count forward or backward from where the primary address
lands (or if there is no primary address before the count, from the line you
are on when you run the command).

Note also that this is one of the few places in ex-mode commands where you
may not insert a blank space. The number must start in the very next character
position after the plus or minus sign. If you violate this rule, the editor
will uncomplainingly operate on some line that definitely is not the line you
expected.

The second style of address modifier is used where you want to do a search
that's complex. Let's say you want to go forward in the file to delete a line
that starts with ``WARNING!'', but not the first such line the editor would
encounter; you want the second instance. Either of these command lines will do
it:

[source,vim]
----
  /^WARNING!/ /^WARNING!/ delete

  /^WARNING!/ // delete
----

The consecutive search patterns tells the editor to find the location of the
first pattern in the usual way, then start searching from that location for
the second pattern. In this case, the first search pattern turned up the first
instance of a line starting with ``WARNING!'', and the second search pattern
led the editor on to the second instance.

A very significant point here is that this combination of two search patterns,
either of which could be a line address in itself, does not tell the editor to
delete two lines. The sequence means that the first pattern is merely a way
station, and that the single line found by the second search pattern is the
only line to be deleted. In brief, what looks like addresses for two lines is
actually only an address for one.

But that's just the start of what you can do. You are not restricted to just
two addresses. I've used up to ten of them to reach one specific line. As an
example:

[source,vim]
----
  ?^Chapter 3$? /^Bibliography$/ /^Spinoza/ /Monads/
----

will bring me to the title line of Spinoza's first work with ``Monads'' in the
title, in the bibliography for Chapter 3.

Nor are you limited to search pattern addresses when putting together address
string. If you want to reach the first line following line 462 that contains
the word ``union'', typing:

[source,vim]
----
  462 /\<union\>/
----

will bring you there. And any of the addresses can take numerical offsets, so:

[source,vim]
----
  462 +137 /register int/ ---
----

is also a legitimate address string.

Addressing a Section of Text
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

TWO ADDRESSES CAN ALSO STAND FOR A RANGE OF LINES. When two addresses are
separated by a comma or a semicolon, the meaning changes radically.

Using ++addr ;++ sets the cursor to the line where ++addr++ matches
before considering the subsequent address. With ++,++ the subsequent
search starts from the __current__ cursor position. So, the command:

[source,vim]
----
  /pat1/ /pat2/
----

Will find the next line forward containing "pat2" after the next line
forward (from the cursor) containing "pat1", whereas:

[source,vim]
----
  7 ; /pat2/
----

Will find the next line forward from line 7 containing "pat2", leaving
the cursor in line 7.

Assuming the cursor is currently on line 3 of the following famous
rhyme:

[numbered]
....
Little Boy Wolly drove a big lorry,
Each and every day,
Along came a copper,
Who pulled out a whopper
And locked poor Wolly away
....

what do you think:

[source,vim]
----
  2 ; /\<a\>/ print
----

will print?

ANSWER

...
  Each and every day,
  Along came a copper,
...

The subsequent ``a'' after line 2 (where the next search starts from
because ++;++ resets the cursor position) resides on line 3.

Had the command been:

[source,vim]
----
  2 , /\<a\>/ print
----

it would have printed:

...
  Each and every day,
  Along came a copper,
  Who pulled out a whopper
...

because the subsequent ``a'' from line 3 (where the cursor is (it
wasn't moved, after all)) resides on line 4.

// TODO: Consider how the following stuff should be modified.

Often you will want an ex-mode command to act on a series of
successive lines.  For example, you may want to move a stretch of text
from one place to another. To do this, you give the address of the
first line you want the command to act on, followed by the last line
it should act on, and separate the two addresses with a comma or
semicolon. So, the command:

[source,vim]
----
  14 , 17 delete
----

will delete line 14 and line 15 and line 16 and line 17. You can see that
putting more than two addresses in a comma or semicolon-separated address
string would be pointless. The ex mode of this editor is discreet if you
ignore this and string together three or more addresses with comma separation:
it uses the last two addresses and discards the rest.

Any ex-mode addresses may be used with a comma or semicolon. All of the
following combinations make sense:

[source,vim]
----
  'd ; /^struct/

  257 , .

  ?^Chapter 9$? , $
----

The first address combination would cause the command that follows it to
operate on the section starting with the line you have previously marked ``d''
and ending with the next forward (from mark ``d'') line that begins
with ``struct'', inclusive.  The second combination covers line 257
through the line you are on now. The third goes backward to include
the previous line containing only ``Chapter 9'', and forward to
include the very last line in your file; plus all the lines in
between, of course.

Vim prefers the second address in a separated range addresses to be
farther ahead in the file than the first address. Vim will ask for
confirmation to swap both sides and continue if this is not the case.
So, the range:

[source,vim]
----
  57 , 188 delete
----

is just fine, while the similar-looking command:

[source,vim]
----
  188 , 57 delete
----

will result in the request to swap the addresses. You can prevent Vim
from asking and let it swap the addresses automatically by prepending
++silent++ to the start of the ex range, as in:

[source,vim]
----
  silent 188 , 57 delete
----

If the two addresses happen to evaluate to the same line, the command
will silently operate on the one line you've specified.

// TODO Vim's better semicolon?

The last limitation is that when you use search patterns on both sides of a
comma, the second search starts from the current line just as the first search
did; it does not start from the line that the first search found. There's a
way around that, though, that involves using one or more semicolons along with
a comma.

A string of successive addresses can be used anywhere in ex mode that you
would use a single address. One very useful technique is to use these address
strings on one or both sides of a comma or semicolon, to indicate a range of
lines to be affected. Remember that a string of successive addresses is the
address of just one line, so this one line can be the start or the end of a
range of lines. For example, in:

[source,vim]
----
  /^INDEX$/ /^Xerxes/ , $ write tailfile

  ?^PREFACE$? /^My 7th point/ , ?^PREFACE$? /^In summary/ -- delete
----

the first command would write the latter part of the index to a new file,
while the second could be used to remove a section of a book's preface.

And that brings up the solution to our previous obstacle; the second search's
starting point. If you want the search after the comma to begin from the point
the first search found, use the first search pattern followed by a semicolon
as the start of your after-the-comma search string, as in either of:

TODO: semicolon

[source,vim]
----
  ?Stradivarius? , ?Stradivarius? /Guarnerius/

  ?Stradivarius? , ?? /Guarnerius/
----

// TODO Successive numeric ranges are additive in Vim

In view of the rules about not going backward in ex-mode address strings, I'd
better clarify the way these limitations work when you combine semicolon and
comma separation, as in these two examples. All but the first of the way
points in each semicolon-separated string must be in the forward direction, of
course, but the start of the second semicolon-separated string may be prior to
any of the addresses in the first such string, that is, the one-way meter
resets itself at the comma point. And using semicolon-separated strings on
both sides of a comma only requires that the final landing point of the second
semicolon-separated string not be earlier in the file than the final landing
point of the first; the relative locations of the way points don't matter to
the comma. To clarify this, consider a couple of odd-looking, and useless, but
very lucid examples. The combination:

[source,vim]
----
  125 ; 176 ; 221 , 32 ; 67 ; 240
----

looks invalid due to the backward jump from line 221 to line 32, but is
actually a perfectly good address. The back jump comes right after the comma,
where it is all right. But:

[source,vim]
----
  125 ; 176 ; 221 , 32 ; 67 ; 218
----

will produce an error message, because the final landing point of the first
semicolon-separated string, line 221, falls later in the file than the final
landing point of the second semicolon-separated string, line 218.

==============================================================================

Now, a note about default addresses. I've already mentioned that most ex-mode
commands that can take an address have a ``default'' address built in, which
tells the editor where to run the command if you don't give an address with
it. Each command has its own default address, which may be the current line,
the current line plus the one following, the last line of the file, or the
entire file.

The range separators have default addresses of their own. They are the same
regardless of what command is being used, and they override any command's own
default address. If you put a comma or semicolon before a command and don't
put an address before the it, by default the address there is the current
line. In the same way, if you leave out the address after it, the default
there is also the current line. You can even leave out the address in both
places and use the current-line default in both: that means the implied
address is ``from the current line to the current line'', which makes the
current line the only line the command will operate on. So every one of the
following command lines:

[source,vim]
----
  .     write >> goodlines

  . , . write >> goodlines

    , . write >> goodlines

  . ;   write >> goodlines

    ;   write >> goodlines
----

will do exactly the same thing: append a copy of j ust the current line in the
file you're editing to another file named ``goodlines''.

Finally, there is one special symbol that represents a comma or
semicolon-separated address combination. The percent sign ( % ) has the same
meaning as 1,$ as an ex-mode address combination. Both refer to the entire
file.

Now You Try It
--------------

Before you try the complex aspects of ex-mode addresses in actual editing
situations, here are some problems you can build yourself up on. For each
problem I've included a solution that will work fairly efficiently.

anchor:E2.1[Exercise 2.1]

.Exercise 2.1

How can you tell the editor to delete the line that holds the very last
instance of ``EXPORT'' in your file? Be sure to check for cases where
``EXPORT'' appears on the last line of the file too. The solution is
straightforward once you know where to start searching.

link:2_line_addresses_solutions.html#S2.1[Solution 2.1]

anchor:E2.2[Exercise 2.2]

.Exercise 2.2

Suppose you want to delete the very first line in the file with ``EXPORT'' on
it, and that just might be line 1. Show two different ways to do this with
ranges in Vim.

link:2_line_addresses_solutions.html#S2.2[Solution 2.2]

anchor:E2.3[Exercise 2.3]

.Exercise 2.3

If you use the address ++?abc? , /xyz/++ , it includes the two lines the
searches (for ``abc'' and ``xyx'') find, as well as all the lines between
them. How would you specify that you want the affected lines to go up to, but
not include, the lines the two searches find? In this case the solution is
simpler than you might think.

link:2_line_addresses_solutions.html#S2.3[Solution 2.3]

Coming Up Next
--------------

The next installment of this tutorial will deal with the Global
commands--they're just too much to absorb right after the mind-numbing
collection of address forms we've just gone through. And to give you more
scope for using all these address forms, I'll also cover ex-mode commands
themselves, particularly the ones that have more capabilities than you
suspect.

// vim: set ft=asciidoc tw=78:
